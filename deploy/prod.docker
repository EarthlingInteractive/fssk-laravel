##################################################
# Stage 1: Build Client
FROM node:10-alpine as client-builder

## Install build toolchain, install node deps and compile native add-ons
RUN apk add --no-cache --virtual .gyp python make g++ \
    && apk add jq

RUN mkdir -p /opt/src

WORKDIR /opt/src
COPY ./client .

ENV CHOKIDAR_USEPOLLING true

# Change the client repp's package.json to make it's homepage directory "/client"
RUN cat package.json | jq '.homepage="/client"' > package.json.tmp && mv package.json.tmp package.json

RUN rm -rf /opt/src/node_modules

RUN npm run build

##################################################
# Stage 2: Build Server
FROM php:7.3.1-apache as server-builder

LABEL maintainer="kunze@earthlinginteractive.com"

COPY ./deploy/php.ini /usr/local/etc/php/

RUN apt-get update \
    && mkdir -p /usr/share/man/man1 \
    && mkdir -p /usr/share/man/man7 \
    && apt-get install -y wget gnupg git zip postgresql postgresql-contrib libpq-dev && a2enmod rewrite proxy

RUN docker-php-ext-install -j$(nproc) pdo pdo_pgsql

RUN mkdir -p /var/www/util

COPY ./deploy/vhost /etc/apache2/sites-enabled/000-default.conf
COPY ./deploy/server-entrypoint.sh /var/www/util/server-entrypoint.sh
RUN chmod 755 /var/www/util/server-entrypoint.sh

COPY ./server /var/www/server

RUN echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \
    && wget -O- https://download.newrelic.com/548C16BF.gpg | apt-key add - \
    && apt-get update \
    && apt-get install -y newrelic-php5

ENV NR_INSTALL_SILENT 1
RUN newrelic-install install

RUN wget -q 'https://getcomposer.org/installer' -O - | php; \
    mv composer.phar /usr/local/bin/composer;

ENV COMPOSER_ALLOW_SUPERUSER 1

COPY ./util/wait-for-it.sh /var/www/util/
RUN chmod 755 /var/www/util/wait-for-it.sh

CMD ["apache2-foreground"]

##################################################
# Stage 3: Transfer client to a place we can serve from
COPY --from=client-builder /opt/src/build /var/www/server/public/client
